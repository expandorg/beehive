// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/service.go

// Package mock_service is a generated GoMock package.
package service

import (
	reflect "reflect"

	honey "github.com/gemsorg/beehive/pkg/honey"
	gomock "github.com/golang/mock/gomock"
)

// MockBeehiveService is a mock of BeehiveService interface
type MockBeehiveService struct {
	ctrl     *gomock.Controller
	recorder *MockBeehiveServiceMockRecorder
}

// MockBeehiveServiceMockRecorder is the mock recorder for MockBeehiveService
type MockBeehiveServiceMockRecorder struct {
	mock *MockBeehiveService
}

// NewMockBeehiveService creates a new mock instance
func NewMockBeehiveService(ctrl *gomock.Controller) *MockBeehiveService {
	mock := &MockBeehiveService{ctrl: ctrl}
	mock.recorder = &MockBeehiveServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBeehiveService) EXPECT() *MockBeehiveServiceMockRecorder {
	return m.recorder
}

// Healthy mocks base method
func (m *MockBeehiveService) Healthy() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Healthy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Healthy indicates an expected call of Healthy
func (mr *MockBeehiveServiceMockRecorder) Healthy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthy", reflect.TypeOf((*MockBeehiveService)(nil).Healthy))
}

// CreateSolution mocks base method
func (m *MockBeehiveService) CreateSolution(hp honey.Solution) (honey.Solution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSolution", hp)
	ret0, _ := ret[0].(honey.Solution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSolution indicates an expected call of CreateSolution
func (mr *MockBeehiveServiceMockRecorder) CreateSolution(hp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSolution", reflect.TypeOf((*MockBeehiveService)(nil).CreateSolution), hp)
}
